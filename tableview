import kotlin.concurrent.thread
import kotlinx.coroutines.*

fun main() {
    // Запускаем фоновый поток
    thread {
        Thread.sleep(1000) // Задержка в 1 секунду
        println("World")
    }

    // Основной поток
    Thread.sleep(2000) // Задержка в 2 секунды
    println("Hello,")
}


import kotlinx.coroutines.*

suspend fun fetchFirstNumber(): Int {
    delay(1000) // Имитация задержки
    return 10
}

suspend fun fetchSecondNumber(): Int {
    delay(2000) // Имитация задержки
    return 20
}

fun main() = runBlocking {
    val startTime = System.currentTimeMillis()

    // Последовательное выполнение
    val number1 = fetchFirstNumber()
    val number2 = fetchSecondNumber()
    println("Последовательная сумма: ${number1 + number2}")
    println("Время выполнения (последовательно): ${System.currentTimeMillis() - startTime} мс")

    val asyncStartTime = System.currentTimeMillis()

    // Асинхронное выполнение
    val deferred1 = async { fetchFirstNumber() }
    val deferred2 = async { fetchSecondNumber() }
    println("Асинхронная сумма: ${deferred1.await() + deferred2.await()}")
    println("Время выполнения (асинхронно): ${System.currentTimeMillis() - asyncStartTime} мс")
}
